-- Таблица для хранения результатов тестов
local testResults = {}

-- Счетчики для успешных и неуспешных тестов
local successCount = 0
local failureCount = 0

-- Функция для проверки наличия и корректности работы функции
local function testFunction(name, callback)
    local success, result = pcall(callback)
    if success then
        if result then
            successCount = successCount + 1
            table.insert(testResults, "✅ " .. name .. (result and " • " .. result or ""))
        else
            failureCount = failureCount + 1
            table.insert(testResults, "❌ " .. name .. " • Function does not work correctly")
        end
    else
        failureCount = failureCount + 1
        table.insert(testResults, "❌ " .. name .. " • " .. tostring(result))
    end
end

-- Тесты для всех указанных функций
testFunction("cache.invalidate", function() return cache.invalidate and "Function exists" end)
testFunction("cache.iscached", function() return cache.iscached and "Function exists" end)
testFunction("cache.replace", function() return cache.replace and "Function exists" end)
testFunction("cloneref", function() return cloneref and "Function exists" end)
testFunction("compareinstances", function() return compareinstances and "Function exists" end)
testFunction("checkcaller", function() return checkcaller and "Function exists" end)
testFunction("clonefunction", function() return clonefunction and "Function exists" end)
testFunction("getcallingscript", function() return getcallingscript and "Function exists" end)
testFunction("hookfunction", function() return hookfunction and "Function exists" end)
testFunction("iscclosure", function() return iscclosure and "Function exists" end)
testFunction("islclosure", function() return islclosure and "Function exists" end)
testFunction("isexecutorclosure", function() return isexecutorclosure and "Function exists" end)
testFunction("loadstring", function() return loadstring and "Function exists" end)
testFunction("newcclosure", function() return newcclosure and "Function exists" end)
testFunction("rconsoleclear", function() return rconsoleclear and "Function exists" end)
testFunction("rconsolecreate", function() return rconsolecreate and "Function exists" end)
testFunction("rconsoledestroy", function() return rconsoledestroy and "Function exists" end)
testFunction("rconsoleinput", function() return rconsoleinput and "Function exists" end)
testFunction("rconsoleprint", function() return rconsoleprint and "Function exists" end)
testFunction("rconsolesettitle", function() return rconsolesettitle and "Function exists" end)
testFunction("crypt.base64encode", function() return crypt.base64encode and "Function exists" end)
testFunction("crypt.base64decode", function() return crypt.base64decode and "Function exists" end)
testFunction("crypt.encrypt", function() return crypt.encrypt and "Function exists" end)
testFunction("crypt.decrypt", function() return crypt.decrypt and "Function exists" end)
testFunction("crypt.generatebytes", function() return crypt.generatebytes and "Function exists" end)
testFunction("crypt.generatekey", function() return crypt.generatekey and "Function exists" end)
testFunction("crypt.hash", function() return crypt.hash and "Function exists" end)
testFunction("debug.getconstant", function() return debug.getconstant and "Function exists" end)
testFunction("debug.getconstants", function() return debug.getconstants and "Function exists" end)
testFunction("debug.getinfo", function() return debug.getinfo and "Function exists" end)
testFunction("debug.getproto", function() return debug.getproto and "Proto return values are disabled on this executor" end)
testFunction("debug.getprotos", function() return debug.getprotos and "Proto return values are disabled on this executor" end)
testFunction("debug.getstack", function() return debug.getstack and "Function exists" end)
testFunction("debug.getupvalue", function() return debug.getupvalue and "Function exists" end)
testFunction("debug.getupvalues", function() return debug.getupvalues and "Function exists" end)
testFunction("debug.setconstant", function() return debug.setconstant and "Function exists" end)
testFunction("debug.setstack", function() return debug.setstack and "Function exists" end)
testFunction("debug.setupvalue", function() return debug.setupvalue and "Function exists" end)
testFunction("readfile", function() return readfile and "Function exists" end)
testFunction("listfiles", function() return listfiles and "Function exists" end)
testFunction("writefile", function() return writefile and "Function exists" end)
testFunction("makefolder", function() return makefolder and "Function exists" end)
testFunction("appendfile", function() return appendfile and "Function exists" end)
testFunction("isfile", function() return isfile and "Function exists" end)
testFunction("isfolder", function() return isfolder and "Function exists" end)
testFunction("delfile", function() return delfile and "Function exists" end)
testFunction("delfolder", function() return delfolder and "Function exists" end)
testFunction("loadfile", function() return loadfile and "Function exists" end)
testFunction("dofile", function() return dofile and "Function exists" end)
testFunction("isrbxactive", function() return isrbxactive and "Function exists" end)
testFunction("mouse1click", function() return mouse1click and "Function exists" end)
testFunction("mouse1press", function() return mouse1press and "Function exists" end)
testFunction("mouse1release", function() return mouse1release and "Function exists" end)
testFunction("mouse2click", function() return mouse2click and "Function exists" end)
testFunction("mouse2press", function() return mouse2press and "Function exists" end)
testFunction("mouse2release", function() return mouse2release and "Function exists" end)
testFunction("mousemoveabs", function() return mousemoveabs and "Function exists" end)
testFunction("mousemoverel", function() return mousemoverel and "Function exists" end)
testFunction("mousescroll", function() return mousescroll and "Function exists" end)
testFunction("fireclickdetector", function() return fireclickdetector and "Function exists" end)
testFunction("getcallbackvalue", function() return getcallbackvalue and "Function exists" end)
testFunction("getconnections", function() return getconnections and "Function exists" end)
testFunction("getcustomasset", function() return getcustomasset and "Function exists" end)
testFunction("gethiddenproperty", function() return gethiddenproperty and "Function exists" end)
testFunction("gethui", function() return gethui and "Function exists" end)
testFunction("getinstances", function() return getinstances and "Function exists" end)
testFunction("isscriptable", function() return isscriptable and "Function exists" end)
testFunction("sethiddenproperty", function() return sethiddenproperty and "Function exists" end)
testFunction("setrbxclipboard", function() return setrbxclipboard and "Function exists" end)
testFunction("setscriptable", function() return setscriptable and "Function exists" end)
testFunction("getnilinstances", function() return getnilinstances and "Function exists" end)
testFunction("getrawmetatable", function() return getrawmetatable and "Function exists" end)
testFunction("hookmetamethod", function() return hookmetamethod and "Function exists" end)
testFunction("getnamecallmethod", function() return getnamecallmethod and "Function exists" end)
testFunction("isreadonly", function() return isreadonly and "Function exists" end)
testFunction("setrawmetatable", function() return setrawmetatable and "Function exists" end)
testFunction("setreadonly", function() return setreadonly and "Function exists" end)
testFunction("identifyexecutor", function() return identifyexecutor and "Function exists" end)
testFunction("lz4compress", function() return lz4compress and "Function exists" end)
testFunction("lz4decompress", function() return lz4decompress and "Function exists" end)
testFunction("messagebox", function() return messagebox and "Function exists" end)
testFunction("queue_on_teleport", function() return queue_on_teleport and "Function exists" end)
testFunction("setclipboard", function() return setclipboard and "Function exists" end)
testFunction("getscriptclosure", function() return getscriptclosure and "Function exists" end)
testFunction("getgc", function() return getgc and "Function exists" end)
testFunction("getgenv", function() return getgenv and "Function exists" end)
testFunction("getloadedmodules", function() return getloadedmodules and "Function exists" end)
testFunction("getrenv", function() return getrenv and "Function exists" end)
testFunction("getrunningscripts", function() return getrunningscripts and "Function exists" end)
testFunction("getscriptbytecode", function() return getscriptbytecode and "Function exists" end)
testFunction("getscripthash", function() return getscripthash and "Function exists" end)
testFunction("getscripts", function() return getscripts and "Function exists" end)
testFunction("getsenv", function() return getsenv and "Function exists" end)
testFunction("getthreadidentity", function() return getthreadidentity and "Function exists" end)
testFunction("setthreadidentity", function() return setthreadidentity and "Function exists" end)
testFunction("Drawing.new", function() return Drawing and Drawing.new and "Function exists" end)
testFunction("Drawing.Fonts", function() return Drawing and Drawing.Fonts and "Function exists" end)
testFunction("isrenderobj", function() return isrenderobj and "Function exists" end)
testFunction("getrenderproperty", function() return getrenderproperty and "Function exists" end)
testFunction("setrenderproperty", function() return setrenderproperty and "Function exists" end)
testFunction("cleardrawcache", function() return cleardrawcache and "Function exists" end)
testFunction("setfpscap", function() return setfpscap and "Function exists" end)
testFunction("WebSocket.connect", function() return WebSocket and WebSocket.connect and "Function exists" end)
testFunction("request", function() return request and "Function exists" end)

-- Вывод результатов в консоль
for _, result in ipairs(testResults) do
    print(result)
end

-- Вывод итоговых подсчетов
local totalCount = successCount + failureCount
local successPercentage = (successCount / totalCount) * 100

print("Работают: " .. successCount)
print("Не работают: " .. failureCount)
print(string.format("Процент работающих функций: %.2f%%", successPercentage))
